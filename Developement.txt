· signup on AWS
· Launch instance
• chmod 400 <secret>.pem
• ssh command
• Install Node version 16.17.0
• Git clone

------------------------------------------------
working with pm2 manager
- Frontend
	. npm install →dependencies instaln
 	· npm run build
	· sudo apt update
	· sudo apt install nginx
	· sudo systemctl start nginx
	· sudo systemctl enable nginx
	· Copy code from dist(buitd files) to /var/www/html
 	. sudo scp -r dist/*  /var/wow/html
    . enable port :80 
- Backend
	. updated DB password
 	. allowed ec2 instance public IP on mongodb Server
	. npm install pm2 -g
	. pm2 start npm --name 'chat-ui' -- run dev // custom name
	. pm2 logs, flush <id,name>, stop <id,name> delete <id,name>
	. config nginx - /etc/nginx/sites-available/default
	. restart nginx - sudo systemctl restart nginx
	. modify the BASEURL in frontend project to "/api
----------------------------------------------------
working with docker
	. login into instance
    . install docker 
		sudo apt update
		sudo apt install -y ca-certificates curl gnupg lsb-release
		curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
		echo \
 		"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \
 		https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
 		| sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
		sudo apt update
		sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
		sudo usermod -aG docker $USER
		# log out and back in or `newgrp docker`

    . secure your Docker-based web app on EC2
	  # Basic security setup
		sudo apt update && sudo apt upgrade -y
		sudo apt install ufw -y

	  # Enable firewall and allow only necessary ports
		sudo ufw default deny incoming
		sudo ufw default allow outgoing
		sudo ufw allow 22/tcp     # SSH
		sudo ufw allow 80/tcp     # HTTP
		sudo ufw allow 443/tcp    # HTTPS (for SSL later)
		sudo ufw enable
    . docker build & run (directly on EC2 instance)
	  # on the EC2 instance, (git clone first) then in project folder
		docker build -t <project-name>:latest .

	  # run container (map host 80 → container 80)
		docker run -d --name <project-name> -p 80:80 --restart unless-stopped <image-name : tag>

	  # Stop and remove the old container when new image is available
		docker pull <image-name:tag>
		docker stop <image-name> && docker rm <image-name>
		docker run -d --name <new-image-name> -p 80:80 --restart unless-stopped <image-name:tag>

    . docker build & run (first local docker-hub then EC2 instence)
	 	# locally
		docker build -t <dockerhubuser>/<contaienr-name>:1.0  .
		docker push <dockerhubuser>/<contaienr-name>:1.0

		# on EC2
		docker pull <dockerhubuser>/<contaienr-name>:1.0
		docker run -d --name portfolio -p 80:80 --restart unless-stopped <dockerhubuser>/<contaienr-name>:1.0
